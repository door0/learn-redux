{"ast":null,"code":"import { createStore } from \"redux\"; //createStore : store를 만들어 주는 함수\n\nconst initialState = {\n  counter: 0,\n  text: '',\n  list: []\n}; // 액션 타입 정의 \n\nconst INCREASE = 'INCREASE';\nconst DECREASE = 'DECREASE';\nconst CHANGE_TEXT = 'CHANGE_TEXT';\nconst ADD_TO_LIST = 'ADD_TO_LIST'; // 액션 생성 함수 \n\nfunction increase() {\n  return {\n    type: INCREASE // 액션 객체에는 type 값이 필수\n\n  };\n} // 화살표 함수로 작성하는 것이 더욱 코드가 간단함.\n\n\nconst decrease = () => ({\n  type: DECREASE\n});\n\nconst changeText = text => ({\n  type: CHANGE_TEXT,\n  text\n});\n\nconst addToList = item => ({\n  type: ADD_TO_LIST,\n  item\n}); // 리듀서를 만들때 함수를 한번 호출함\n// 그 시점에 state가 undefined 이면 초기상태가 만들어지지 않으니까\n// 초기 상태가 initialState가 되게끔 해야함\n\n\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INCREASE:\n      return { ...state,\n        counter: state.counter + 1\n      };\n\n    case DECREASE:\n      return { ...state,\n        counter: state.counter - 1\n      };\n\n    case CHANGE_TEXT:\n      return { ...state,\n        text: action.text\n      };\n\n    case ADD_TO_LIST:\n      return { ...state,\n        list: state.list.concat(action.item) //기존의 배열에 item을 추가한 배열을 만듦으로써 기존 리스트를 대체함.\n\n      };\n\n    default:\n      return state;\n  }\n} // 스토어 만들기 \n\n\nconst store = createStore(reducer);\nconsole.log(store.getState()); // 상태조회\n\nconst listener = () => {\n  const state = store.getState();\n  console.log(state);\n}; // 구독\n\n\nconst unsubscribe = store.subscribe(listener); //unsubscribe(); : 구독을 해제할때는 unsubscribe를 호출하면 됨\n\nstore.dispatch(increase());\nstore.dispatch(decrease());\nstore.dispatch(changeText('안녕하세요!'));\nstore.dispatch(addToList({\n  id: 1,\n  text: '와우!'\n})); // store의 인스턴스를 콘솔에서 사용가능\n\nwindow.store = store;","map":{"version":3,"sources":["C:/Users/82103/Documents/GitHub/learn-redux/src/exercise.js"],"names":["createStore","initialState","counter","text","list","INCREASE","DECREASE","CHANGE_TEXT","ADD_TO_LIST","increase","type","decrease","changeText","addToList","item","reducer","state","action","concat","store","console","log","getState","listener","unsubscribe","subscribe","dispatch","id","window"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B,C,CACA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,CADU;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,IAAI,EAAE;AAHa,CAArB,C,CAMA;;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB,C,CAEA;;AACA,SAASC,QAAT,GAAoB;AAClB,SAAO;AACLC,IAAAA,IAAI,EAAEL,QADD,CACU;;AADV,GAAP;AAGD,C,CAED;;;AACA,MAAMM,QAAQ,GAAG,OAAO;AACtBD,EAAAA,IAAI,EAAEJ;AADgB,CAAP,CAAjB;;AAIA,MAAMM,UAAU,GAAGT,IAAI,KAAK;AAC1BO,EAAAA,IAAI,EAAEH,WADoB;AAE1BJ,EAAAA;AAF0B,CAAL,CAAvB;;AAKA,MAAMU,SAAS,GAAGC,IAAI,KAAK;AACzBJ,EAAAA,IAAI,EAAEF,WADmB;AAEzBM,EAAAA;AAFyB,CAAL,CAAtB,C,CAKA;AACA;AACA;;;AACA,SAASC,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBf,YAAsB;AAAA,MAARgB,MAAQ;;AAC7C,UAAQA,MAAM,CAACP,IAAf;AACE,SAAKL,QAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELd,QAAAA,OAAO,EAAEc,KAAK,CAACd,OAAN,GAAgB;AAFpB,OAAP;;AAIF,SAAKI,QAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELd,QAAAA,OAAO,EAAEc,KAAK,CAACd,OAAN,GAAgB;AAFpB,OAAP;;AAIF,SAAKK,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELb,QAAAA,IAAI,EAAEc,MAAM,CAACd;AAFR,OAAP;;AAIF,SAAKK,WAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELZ,QAAAA,IAAI,EAAEY,KAAK,CAACZ,IAAN,CAAWc,MAAX,CAAkBD,MAAM,CAACH,IAAzB,CAFD,CAGL;;AAHK,OAAP;;AAKF;AACE,aAAOE,KAAP;AAvBJ;AAyBD,C,CAED;;;AACA,MAAMG,KAAK,GAAGnB,WAAW,CAACe,OAAD,CAAzB;AACAK,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ,E,CAA+B;;AAE/B,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMP,KAAK,GAAGG,KAAK,CAACG,QAAN,EAAd;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD,CAHD,C,CAKA;;;AACA,MAAMQ,WAAW,GAAGL,KAAK,CAACM,SAAN,CAAgBF,QAAhB,CAApB,C,CACA;;AAEAJ,KAAK,CAACO,QAAN,CAAejB,QAAQ,EAAvB;AACAU,KAAK,CAACO,QAAN,CAAef,QAAQ,EAAvB;AACAQ,KAAK,CAACO,QAAN,CAAed,UAAU,CAAC,QAAD,CAAzB;AACAO,KAAK,CAACO,QAAN,CAAeb,SAAS,CAAC;AAAEc,EAAAA,EAAE,EAAE,CAAN;AAASxB,EAAAA,IAAI,EAAE;AAAf,CAAD,CAAxB,E,CAEA;;AACAyB,MAAM,CAACT,KAAP,GAAeA,KAAf","sourcesContent":["import { createStore } from \"redux\";\r\n//createStore : store를 만들어 주는 함수\r\n\r\nconst initialState = {\r\n  counter: 0,\r\n  text: '',\r\n  list: []\r\n}\r\n\r\n// 액션 타입 정의 \r\nconst INCREASE = 'INCREASE';\r\nconst DECREASE = 'DECREASE';\r\nconst CHANGE_TEXT = 'CHANGE_TEXT';\r\nconst ADD_TO_LIST = 'ADD_TO_LIST';\r\n\r\n// 액션 생성 함수 \r\nfunction increase() {\r\n  return {\r\n    type: INCREASE // 액션 객체에는 type 값이 필수\r\n  };\r\n}\r\n\r\n// 화살표 함수로 작성하는 것이 더욱 코드가 간단함.\r\nconst decrease = () => ({\r\n  type: DECREASE,\r\n})\r\n\r\nconst changeText = text => ({\r\n  type: CHANGE_TEXT,\r\n  text\r\n})\r\n\r\nconst addToList = item => ({\r\n  type: ADD_TO_LIST,\r\n  item\r\n})\r\n\r\n// 리듀서를 만들때 함수를 한번 호출함\r\n// 그 시점에 state가 undefined 이면 초기상태가 만들어지지 않으니까\r\n// 초기 상태가 initialState가 되게끔 해야함\r\nfunction reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case INCREASE:\r\n      return {\r\n        ...state,\r\n        counter: state.counter + 1,\r\n      };\r\n    case DECREASE:\r\n      return {\r\n        ...state,\r\n        counter: state.counter - 1,\r\n      };\r\n    case CHANGE_TEXT:\r\n      return {\r\n        ...state,\r\n        text: action.text\r\n      };\r\n    case ADD_TO_LIST:\r\n      return {\r\n        ...state,\r\n        list: state.list.concat(action.item)\r\n        //기존의 배열에 item을 추가한 배열을 만듦으로써 기존 리스트를 대체함.\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// 스토어 만들기 \r\nconst store = createStore(reducer);\r\nconsole.log(store.getState()); // 상태조회\r\n\r\nconst listener = () => {\r\n  const state = store.getState();\r\n  console.log(state);\r\n}\r\n\r\n// 구독\r\nconst unsubscribe = store.subscribe(listener);\r\n//unsubscribe(); : 구독을 해제할때는 unsubscribe를 호출하면 됨\r\n\r\nstore.dispatch(increase());\r\nstore.dispatch(decrease());\r\nstore.dispatch(changeText('안녕하세요!'));\r\nstore.dispatch(addToList({ id: 1, text: '와우!'}));\r\n\r\n// store의 인스턴스를 콘솔에서 사용가능\r\nwindow.store = store;"]},"metadata":{},"sourceType":"module"}